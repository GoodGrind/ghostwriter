plugins {
    id 'com.github.johnrengelman.shadow' version '1.2.4'
}

apply plugin: "maven"
apply plugin: "signing"

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
    annotationProcessor = 'io.ghostwriter.openjdk.v8.GhostWriterAnnotationProcessor'
}

dependencies {
    compile "io.ghostwriter:ghostwriter-api-java:${project.ext.ghostwriterApiVersion}"

    // Dependency for doing the bootstrap build. Contains the annotation processor class
    compile files(jar.archivePath)

    // We have to use the jar as a dependency instead of project, otherwise we'll have the Java 7 tools.jar on the classpath
    compile files(project(":ghostwriter-openjdk-v7").jar)

    // This needs to be added to the 'shadow' configuration in order to exclude it.
    // We explicitly add it to the classpath later in the 'compileJava' task.
    // (For details, check: https://github.com/johnrengelman/shadow/issues/142)
    shadow files("${parent.projectDir}/toolsJar/tools_1.8.0_74.jar")
}

compileJava {
    // Explicitly add the compile time dependencies that are excluded because of the shadowJar setup
    classpath += configurations.shadow

    if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
        enabled = false;
        logger.error "No JDK8 configured! Disabling $project.name build!"
        return
    }

    // we need to explicitly disable annotation processing otherwise the service provided by the openjdk-v7.jar
    // and/or the archive entry used for the bootstrapping task.
    options.compilerArgs = [
            '-proc:none'
    ]
}

javadoc {
    // Explicitly add the compile time dependencies that are excluded because of the shadowJar setup
    classpath += configurations.shadow
}

task bootstrap(type: JavaCompile, group: 'build', description: 'Create a  self-instrumented build of GhostWriter', dependsOn: 'jar') {
    if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
        enabled = false
        logger.error "No JDK8 present! Disabling $project.name bootstrapping!"
        return
    }

    source = sourceSets.main.java.srcDirs
    classpath = sourceSets.main.compileClasspath
    destinationDir = sourceSets.main.output.classesDir
    options.compilerArgs = [
            '-processor', annotationProcessor
    ]
}

shadowJar {
    classifier = 'bundle'
    dependencies {
        // This is a transitive dependency, we only want to have the v7 base in the shadowJar
        exclude(dependency("io.ghostwriter:ghostwriter-api-java"))
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from tasks.javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives shadowJar
    archives javadocJar
    archives sourcesJar
}

// Remove the default JAR artifact that does not bundle the dependencies.
// Would not hurt to distribute it, however this way we ensure that that bundled one is used
configurations.archives.artifacts.with { archives ->
    def jarArtifact
    archives.each {
        if (it.type == 'jar' && it.classifier == '') {
            jarArtifact = it
        }
    }
    remove(jarArtifact)
}

signing {
    required {
        gradle.taskGraph.hasTask("uploadArchives")
    }

    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: mavenLocal().url)

            if (project.ext.doUploadToSonatype) {
                repository(url: project.ext.sonatypeUrl) {
                    authentication(userName: project.ext.sonatypeUserName, password: project.ext.sonatypePassword)
                }
            }

            pom.project {
                name 'GhostWriter'
                packaging 'jar'
                description 'Ghostwriter API complie-time instrumentation support for Java 8'
                url project.ext.ghostwriterUrl

                scm {
                    url project.ext.ghostwriterScm
                    connection project.ext.ghostwriterUrl
                    developerConnection project.ext.ghostwriterScm
                }

                licenses {
                    license {
                        name project.ext.ghostwriterLicense
                        url project.ext.ghostwriterLicenseUrl
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id project.ext.ghostwriterDeveloperId
                        name project.ext.ghostwriterDeveloperName
                        email project.ext.ghostwriterDeveloperEmail
                    }
                }

            }
        }
    }
}